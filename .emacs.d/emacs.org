#+title My emacs config
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

* Basic Config
** Some basic init
#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)

  (setq inhibit-startup-message t)
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  ;(setq split-width-threshold most-positive-fixnum)

  (setq-default indent-tabs-mode nil)

  (show-paren-mode 1)
  ;(setq show-paren-style 'expression)

  (setq-default tab-width 4)

  (column-number-mode)
#+end_src

** Set some global keys
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-x <") 'org-insert-structure-template)
#+end_src

** Desktop mode
#+begin_src emacs-lisp
  ;(desktop-save-mode 1)

  (setq backup-directory-alist `(("." . "~/.saves")))
  (setq backup-by-copying t)
  (setq delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)

  (save-place-mode 1)
  (setq save-place-forget-unreadable-files nil)
#+end_src

** Save hook
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

* Setup straight.el
** Bootstrap
*Note*: if this doesnt work, will need to clone straight.el manually
#+begin_src emacs-lisp
  ;; Bootsrap straight.el
  (setq straight-repository-branch "master")
  (setq straight-use-package-by-default t)

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** Setup
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src

** Enable auto update
#+begin_src emacs-lisp
  (use-package auto-package-update
    :config
    (setq auto-package-update-prompt-before-update t)
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe)
    )
#+end_src

* Org Config
** Setup
#+begin_src emacs-lisp
  (defun echo/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1)
    )
  (use-package org
    :hook (org-mode . echo/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    )

  ;  (use-package org-bullets
  ;        :after org
  ;        :hook (org-mode . org-bullets-mode)
  ;        :custom
  ;        (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))
  ;        )

    (defun echo/org-mode-visual-fill ()
          (setq visual-fill-column-width 100
                visual-fill-column-center-text t)
          (visual-fill-column-mode 1))
    (use-package visual-fill-column
          :hook (org-mode . echo/org-mode-visual-fill))

  (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (python . t)))
#+end_src

** Auto-tangle Config
#+begin_src emacs-lisp
  (defun echo/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/settings/.emacs.d/emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'echo/org-babel-tangle-config))
  )
#+end_src

** Template
#+begin_src emacs-lisp
  (use-package org-contrib
    :after org
    :config
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    )
#+end_src

* Tools
** Smart home/end
#+begin_src emacs-lisp
  (use-package mwim
    :bind (("C-a" . mwim-beginning-of-code-or-line)
           ("C-e" . mwim-end-of-code-or-line)
           ("<home>" . mwim-beginning-of-code-or-line)
           ("<end>" . mwim-end-of-code-or-line))
    )

#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package magit
    :config
    (setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
    )
#+end_src

** modes
#+begin_src emacs-lisp
  (use-package web-mode
    :config
    (setq web-mode-enable-auto-indentation nil)
    )

  (use-package yaml-mode
    :mode ("\\.yaml\\'" "\\.yml\\'")
    )

  (use-package python-mode
    :ensure nil
    :custom
    (python-shell-interperter "python")
    )

  ;; Todo
  (require 'web-mode)
  (setq web-mode-enable-auto-indentation nil)
  (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.php[s34]?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

  (setq web-mode-engines-alist
      '(
        ("smarty" . "/home/echo/projects/website/templates/.*\\.html\\'")
        )
      )

#+end_src

** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.5)
    )
#+end_src

** amx
#+begin_src emacs-lisp
  (use-package amx
    :config
    (amx-mode)
    )
#+end_src

** projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config
    (projectile-mode)
    :bind
    ("C-p" . projectile-command-map)
    :init
    (when (file-directory-p "~/projects")
      (setq projectile-project-search-path '("~/projects")))
    )

  (use-package ripgrep)

#+end_src

** dired
#+begin_src emacs-lisp

#+end_src

* Interface
** General
#+begin_src emacs-lisp
    (use-package vertico
       :init
       (vertico-mode)
       (setq vertico-cycle t))

     (use-package savehist
       :straight nil
       :init
       (savehist-mode))

     (use-package orderless
       :init
       (setq completion-styles '(orderless)
             completion-category-defaults nil
             completion-category-overrides '((file (styles partial-completion)))))

     (use-package marginalia
       :after vertico
       :init
       (marginalia-mode))

     (use-package consult
       :bind
       (("C-x b" . consult-buffer)
        ("C-x C-b" . consult-buffer)
        ("M-g M-g" . consult-goto-line)
        ("C-s" . consult-line)
        ("C-f" . consult-imenu))
       :config
       (consult-customize
        consult-theme :preview-key 'any
        consult-line :prompt "Search: " :preview-key 'any)

       (setq consult-project-root-function #'projectile-project-root))

     (use-package embark
       :bind
       (("C-\\" . embark-act)         ;; pick some comfortable binding
        ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
       :config
       ;; Hide the mode line of the Embark live/completions buffers
       (add-to-list 'display-buffer-alist
                    '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                      nil
                      (window-parameters (mode-line-format . none)))))

     (use-package embark-consult
       :after (embark consult)
       :demand t ; only necessary if you have the hook below
       ;; if you want to have consult previews as you move around an
       ;; auto-updating embark collect buffer
       :hook
       (embark-collect-mode . consult-preview-at-point-mode))

#+end_src

** Visual Bookmarks
#+begin_src emacs-lisp
  (use-package bm
    :bind
    ("<C-left>" . bm-toggle)
    ("<C-up>" . bm-previous)
    ("<C-down>" . bm-next)
    )
#+end_src

** Window stuff
#+begin_src emacs-lisp
  (use-package switch-window
    :bind
    ("C-x o" . switch-window)
    ("C-x 1" . switch-window-then-maximize)
    ("C-x 2" . switch-window-then-split-below)
    ("C-x 3" . switch-window-then-split-right)
    ("C-x 0" . switch-window-then-delete)
    :config
    (setq switch-window-minibuffer-shortcut ?z)
    (setq switch-window-shortcut-appearance 'asciiart)
    )
  ; maybe use winmode instead of switch-window?

  (winner-mode)


  (use-package buffer-move)

  (use-package hydra)
  (defhydra hydra-mywindow ()
    "
    ^Change Window^   ^Buffer Move^      ^Window^         ^Resize Window^
    -------------------------------------------
        ↑     	        C-↑             Split _v_ertical    _<prior>_ Enlarge Horizontally
        ↓     	        C-↓             Split _h_orizontal  _<next>_ Shrink Horizontally
        ←     	        C-←             _k_ill              _<deletechar>_ Shrink Vertically
        →               C-→             _u_ndo
    _SPC_ cancel
    "
    ("<up>" windmove-up)
    ("<down>" windmove-down)
    ("<left>" windmove-left)
    ("<right>" windmove-right)
    ("C-<up>" buf-move-up)
    ("C-<down>" buf-move-down)
    ("C-<left>" buf-move-left)
    ("C-<right>" buf-move-right)
    ("v" split-window-right)
    ("h" split-window-below)
    ("k" delete-window)
    ("u" winner-undo)
    ("<prior>" enlarge-window-horizontally)
    ("<next>" shrink-window-horizontally)
    ("<deletechar>" shrink-window)
    ("SPC" nil)
    ("q" nil)
    )
  (global-set-key (kbd "C-M-w") 'hydra-mywindow/body)
#+end_src


* Visual Setup
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-gruvbox t)
    ;(load-theme 'doom-dracula t)
    )
  (use-package doom-modeline
    :init
    (doom-modeline-mode 1)
    )

  (use-package solaire-mode
    :init
    (solaire-global-mode +1)
    (add-to-list 'solaire-mode-themes-to-face-swap 'doom-dracula)
    )

  (setq visible-bell t)

  (global-display-line-numbers-mode t)
  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook)
                )
    (add-hook mode (lambda () (display-line-numbers-mode 0)))
    )

  (setq frame-background-mode 'dark)
#+end_src
